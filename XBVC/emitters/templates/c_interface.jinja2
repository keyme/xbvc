/* This file is automatically generated by xbvcgen DO NOT EDIT */
#include <stdint.h>
#include <string.h>
#include <math.h>

#include <stdio.h>

#include "cobs.h"
#include "xbvc_core.h"

union xbvc_msg_union {
{% for msg in msgs | sort(attribute='msg_id') %}
    struct x_{{msg.name}} {{msg.name}};
{% endfor %}
};

struct xbvc_message_envelope {
    uint32_t msg_type;
    union xbvc_msg_union msg;
};

enum enc_sizes {
    E_0,
    E_8,
    E_16,
    E_32,
    E_64,
};

xbvc_data_handler xbvc_platform_read = NULL;
xbvc_data_handler xbvc_platform_write = NULL;


#define MAX_PRECISION 9

struct splitfloat {
    uint8_t sign;
    uint32_t whole;
    uint32_t frac;
};


/* NOTE: The splitfloat/combine_float functions store floating point
   numbers as a signed 32 bit whole number, and an unsigned fractional
   part.  It is important to note that the fractional part is stored
   in reverse!  This is done to handle leading zeros gracefully.  For
   example, 0.07 cannot be easily represented this way as the leading
   0 will be lost.  Instead we store it as 70, and unpack in reverse
   when converting back to float.  Alternatively, we COULD store an
   exponent and divide the fractional part by 10^exp, but then we need
   to store data on the wire to count the exponent.
*/

static volatile uint32_t random_state = 0xbeefcafe;

uint32_t xorshift32()
{
    /* Algorithm "xor" from p. 4 of Marsaglia, "Xorshift RNGs" */
    uint32_t x = random_state;
    x ^= x << 13;
    x ^= x >> 17;
    x ^= x << 5;
    random_state = x;
    return x;
}

void xbvc_seed_random(uint32_t seed)
{
    random_state = seed;
}

struct splitfloat split_float(float v, int dec_points)
{
    struct splitfloat result;
    result.sign = v < 0 ? 1 : 0;
    v = fabs(v);
    result.whole = (uint32_t)v;
    v = v - result.whole;
    result.frac = 0;

    if (dec_points > MAX_PRECISION) {
        dec_points = MAX_PRECISION;
    }

    uint32_t mul = 1;
    while (dec_points && v) {
        v *= 10;
        uint32_t addition = (uint32_t)v * mul;
        result.frac += addition;
        v = v - (uint32_t)(v);
        dec_points--;
        mul *= 10;
    }

    return result;
}

float combine_float(struct splitfloat s)
{
    float result_whole = (float)s.whole;
    float result_frac = 0;
    uint32_t mul = 10;
    while (s.frac) {
        float addition = (float)(s.frac % 10) / (float)mul;
        result_frac += addition;
        s.frac /= 10;
        mul *= 10;
    }
    if (result_whole < 0) {
        result_frac *= -1.0;
    }
    float result = result_whole + result_frac;
    if (s.sign) {
        result *= -1;
    }

    return result;
}

static int xbvc_encode_bit_vector(void *src, uint8_t *dst, uint8_t rt)
{
    int idx = 0;
    uint64_t val = 0;

    switch(rt) {
    case E_8:
        val = *(uint8_t*)src;
        break;
    case E_16:
        val = *(uint16_t*)src;
        break;
    case E_32:
        val = *(uint32_t*)src;
        break;
    case E_64:
        val = *(uint64_t*)src;
        break;
    }

    do {
        dst[idx] = val % 128;
        val /= 128;

        if (val > 0)
            dst[idx] = dst[idx] | 0x80;
        idx++;

    } while ( val > 0 );
    return idx;

}

static int xbvc_decode_bit_vector(uint8_t *src, void *dst, uint8_t rt)
{
    uint64_t mul = 1;
    int idx = 0;
    uint8_t digit;

    do {
        digit = src[idx++];
        switch (rt) {
        case E_8:
            *(uint8_t*)dst += (uint8_t)((digit & 127) * mul);
            break;
        case E_16:
            *(uint16_t*)dst += (uint16_t)((digit & 127) * mul);
            break;
        case E_32:
            *(uint32_t*)dst += (uint32_t)((digit & 127) * mul);
            break;
        case E_64:
            *(uint64_t*)dst += (uint64_t)((digit & 127) * mul);
            break;
        }
        mul *= 128;
    } while ((digit & 128) != 0);
    return idx;
}

{% for msg in enc_msgs | sort(attribute='msg_id') %}
int xbvc_encode_{{msg.name}}(struct x_{{msg.name}} *src, uint8_t *dest,
                             int max_len, uint32_t rnd_id, uint32_t response_id)
{
    XBVCTOUCH(src);
    XBVCTOUCH(dest);
    XBVCTOUCH(max_len);
    int index = 0;
    index += xbvc_encode_bit_vector(&rnd_id, &dest[index], E_32);
    if (index >= max_len) {
        return -1;
    }
    index += xbvc_encode_bit_vector(&response_id, &dest[index], E_32);
    if (index >= max_len) {
        return -1;
    }
{{msg.encoder_body}}
    return index;
}
{% endfor %}

{% for msg in dec_msgs | sort(attribute='msg_id') %}
int xbvc_decode_{{msg.name}}(uint8_t *src, struct x_{{msg.name}} *dest,
                             int max_len)
{
    XBVCTOUCH(src);
    XBVCTOUCH(dest);
    XBVCTOUCH(max_len);
    int index = 0;
    index += xbvc_decode_bit_vector(&src[index], &dest->random_id, E_32);
    if (index >= max_len) {
        return -1;
    }
    index += xbvc_decode_bit_vector(&src[index], &dest->response_to, E_32);
    if (index >= max_len) {
        return -1;
    }

{{msg.decoder_body}}
    return index;
}

{% endfor %}

static int xbvc_encode_message(void *msg,
			       uint32_t msg_type,
			       uint8_t *dst,
                               size_t dst_len,
                               uint32_t rnd_id,
                               uint32_t response_id)
{
    static uint8_t encbuf[sizeof(struct xbvc_message_envelope) * 2] = {0};
    uint8_t *bufptr = encbuf;
    uint8_t *msgptr = (uint8_t*)msg;
    int ret;
    int enc_res = 0;
    size_t size_calc = 0;

    /* Encode the message type and move the buffer pointer */
    ret = xbvc_encode_bit_vector(&msg_type, bufptr, E_32);
    bufptr += ret;
    switch (msg_type) {
	{% for msg in enc_msgs | sort(attribute='msg_id') %}
    case E_MSG_{{msg.name.upper()}}:
        enc_res = xbvc_encode_{{msg.name}}(
            (struct x_{{msg.name}}*)msgptr,
            bufptr, sizeof(encbuf) - ret, rnd_id, response_id);
        break;
	{% endfor %}
    default: return -1;
    }

    if (enc_res < 0) {
        return -2;
    }

    bufptr += enc_res;

    /* Make sure that the encoded message will fit in our
     * destination buffer, figure out the maximum number of bytes
     * we will see from the cobs encode */
    size_calc = (size_t)(bufptr - encbuf);
    size_calc += size_calc/0xff + 1;

    if ((size_t)(bufptr - encbuf) > dst_len) {
        return -4;
    }

    /* Now that we have the xbv encoded message, cobs encode the
     * packet into the destination buffer */
    ret = cobs_encode(encbuf, (size_t)(bufptr - encbuf),
                      dst);

     if (ret) {
        return ret;
    } else {
        return -5;
    }
}

static int xbvc_decode_message(uint8_t *ib,
			       struct xbvc_message_envelope *env,
			       int len)
{
    size_t dec_len;
    int ret, dec_res = 0;

    /* This temporarily holds the data stream after the cobs decode */
    uint8_t dec_buf[sizeof(struct xbvc_message_envelope) * 2] = {0};
    uint8_t *dec_ptr = dec_buf;
    uint8_t *env_ptr = (uint8_t*)env;
    /* Length of the stream */
    dec_len =  cobs_decode(ib, len, dec_buf);

    if (!dec_len)
        return -1;

    /* Decode the envelope type */
    ret = xbvc_decode_bit_vector(dec_ptr, env_ptr, E_32);

    /* Move the decode pointer and the envelope pointer */
    dec_ptr += ret;
    env_ptr += sizeof(env->msg_type);

    switch (env->msg_type) {
	{% for msg in dec_msgs | sort(attribute='msg_id') %}
    case E_MSG_{{msg.name.upper()}}:
        dec_res = xbvc_decode_{{msg.name}}(
            dec_ptr,
            (struct x_{{msg.name}}*)env_ptr,
            sizeof(dec_buf) - ret);
        break;
	{% endfor %}
    default: return -2;
    }

    if (dec_res < 0) {
        return -3;
    }

    /* Glorious victory */
    return 0;
}

static void _default_handler(void *msg)
{
    XBVCTOUCH(msg);
}

{% for msg in dec_msgs | sort(attribute='msg_id') %}
void xbvc_handle_{{msg.name}}(struct x_{{msg.name}} *msg) __attribute__((weak, alias("_default_handler")));
{% endfor %}
void xbvc_handle_decode_error_found() __attribute__((weak, alias("_default_handler")));

/* TODO: Think about moving all autogen sections to their own file */
static void xbvc_handle_packet(uint8_t *ib, int len)
{
    struct xbvc_message_envelope env = {0};
    int ret;

    ret = xbvc_decode_message(ib, &env, len);

    if (ret)
        xbvc_handle_decode_error_found();

    switch (env.msg_type) {
	{% for msg in dec_msgs | sort(attribute='msg_id') %}
    case E_MSG_{{msg.name.upper()}}:
        xbvc_handle_{{msg.name}}((struct x_{{msg.name}} *)&env.msg);
        break;
    {% endfor %}
    };

}

int xbvc_send_response(void *msg, uint32_t msg_type, uint32_t response_id,
                       uint32_t *rnd_id_ret)
{
    static uint8_t outputbuf[sizeof(struct xbvc_message_envelope) * 2] = {0};
    int ret;

    uint32_t rnd_id = xorshift32();
    ret = xbvc_encode_message(msg, msg_type, outputbuf,
                              sizeof(outputbuf), rnd_id, response_id);

    if (rnd_id_ret != NULL) {
        *rnd_id_ret = rnd_id;
    }

    if (ret < 0)
        return ret;

    /* The +1 signifies the '0' packet delimiter */
    ret = xbvc_platform_write(outputbuf, ret + 1);

    memset(outputbuf, 0x00, sizeof(outputbuf));
    return ret;
}

int xbvc_send(void *msg, uint32_t msg_type, uint32_t *rnd_id_ret)
{
    /* We send a null response as this is just a message, not
       responding to some stimulus */
    return xbvc_send_response(msg, msg_type, XBVC_NULL_RESPONSE, rnd_id_ret);
}

/* xbvc initialization function */
void xbvc_init(void *params, xbvc_data_handler read,
	       xbvc_data_handler write,
	       xbvc_platform_init_handler platform_init)
{
    xbvc_platform_read = read;
    xbvc_platform_write = write;
    if (platform_init != NULL) {
        platform_init(params);
    }
}

/* xbvc main task. */
void xbvc_run(void)
{
    /* Need to leave space at end of input buffer for overhead bytes */
    static uint8_t inputbuf[sizeof(struct xbvc_message_envelope) * 2] = {0};
    static uint32_t idx = 0;

    uint8_t c = 0x00;
    int res = 0;

    if (xbvc_platform_read == NULL || xbvc_platform_write == NULL)
        return;

    /* Get a single character from the provided interface */
    res = xbvc_platform_read(&c, 1);

    /* Go around again if we didn't receive one */
    if (res < 1)
        return;

    /* If the character was a '\x00', this indicates the
     * end of a cobs packet, try to decode it */
    if (c == 0) {
        xbvc_handle_packet(inputbuf, idx);
        idx = 0;
        memset(inputbuf, 0x00, sizeof(inputbuf));
    } else {
        inputbuf[idx++] = c;

        /* We're going to overrun the input buffer.
         * Start from scratch */
        if (idx >= sizeof(inputbuf)) {
            idx = 0;
            memset(inputbuf, 0x00, sizeof(inputbuf));
        }
    }
}
