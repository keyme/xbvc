{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# LANGUAGE NamedFieldPuns #-}

module XBVC where

import Bitvec ()
import qualified Cobs
import XBVC.Data

import Control.Concurrent
import qualified Data.ByteString as BS
import Data.IORef
import Data.Word
import qualified Data.Map as Map
import System.Timeout
import Data.Maybe


type WriteChannel = BS.ByteString -> IO Bool

stopByte :: Word8
stopByte = 0

newDispatcher :: IO Dispatcher
newDispatcher = do
  {% for msg in messages %}
    {{msg.camel_name}} <- newIORef $ standIn "{{msg.camel_name}}"
  {% endfor %}
    decodeErrorFound <- newIORef $ return ()

    return $ Dispatcher {
  {% for line in msg_name_list %}
        {{line}}
  {% endfor %}
        , decodeErrorFound
    }
    where
        standIn str _ msg = do
            putStrLn $ "Message type " ++ str ++ " has no handler: \n\t" ++ (show msg)

newXbvcDispatcher :: IO XBVCDispatcher
newXbvcDispatcher = do
    cbs <- newDispatcher
    rMap <- newMVar mempty
    return $ XBVCDispatcher
                { callbacks = cbs
                , responseMap = rMap
                }


xbvcSend :: XBVCType a
         => WriteChannel
         -> a
         -> Maybe Int
         -> IO Bool
xbvcSend serialChannel msg rID = do
    packet <- xbvcPacket msg rID
    serialChannel $ Cobs.encode $ serialize packet

xbvcSendWithResponse :: (XBVCType a, XBVCType b)
                     => WriteChannel
                     -> XBVCDispatcher
                     -> a
                     -> Maybe Int
                     -> Int
                     -> IO (Maybe b)
xbvcSendWithResponse sendChannel dispatcher msg rID timeLimit = do
    msg <- xbvcPacket msg rID
    let idKey = msgID msg
    let bs = serialize msg
    empMsg <- newEmptyMVar
    modifyMVar_ respMap (return . Map.insert idKey empMsg)
    sent <- sendChannel $ Cobs.encode bs
    resp <- case sent of
        False -> return Nothing
        True -> do
          respMsg <- timeout (timeLimit * 1000) $ takeMVar empMsg
          let mPayLoad = payLoad <$> (fromMaybe Nothing respMsg)
          return $ mPayLoad >>= deserialize
    modifyMVar_ respMap (return . Map.delete idKey)
    return resp
    where
        respMap = responseMap dispatcher


dispatch :: XBVCDispatcher -> XBVCPacket -> IO (Maybe String)
dispatch dispatcher packet =
    if respID packet == 0
        then do
            _ <- forkIO $ call (callbacks dispatcher) packet
            return Nothing
        else do
            responses <- takeMVar $ responseMap dispatcher
            result <- case Map.lookup (respID packet) responses of
                Nothing ->
                    return $ Just $
                        "Got response for a message we don't remember sending. "
                        ++ "Unexpected response was " ++ (show packet)
                Just mvar -> do
                    putMVar mvar (Just packet)
                    return Nothing
            putMVar (responseMap dispatcher) responses
            return result


decodePacket :: BS.ByteString -> Either String XBVCPacket
decodePacket bs = case Cobs.decode bs of
                    Left err -> Left err
                    Right uncobs -> case deserialize uncobs of
                        Nothing -> Left "Bitvec decode error"
                        Just pkt -> Right pkt


processData :: BS.ByteString
       -> XBVCDispatcher
       -> IO (Either String BS.ByteString)
processData pkt dispatcher = do
  case frameEnd of
    False -> return $ Right pkt
    True -> do
        case decodePacket pkt of
            Left err -> do
                putStrLn err
                decodeCB <- readIORef $ decodeErrorFound $ callbacks dispatcher
                decodeCB
                return $ Left $ errPrepend ++ err
            Right packet -> do
                errM <- dispatch dispatcher packet
                case errM of
                    Just err -> return $ Left $ errPrepend ++ err
                    Nothing -> return $ Right BS.empty
  where
    frameEnd = if BS.null pkt
               then False
               else ((BS.last pkt) == (0 :: Word8))
    errPrepend = "Bad Packet: " ++ show (BS.unpack pkt) ++ " - "
